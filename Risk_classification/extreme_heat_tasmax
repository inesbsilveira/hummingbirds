// Function to remove duplicates based on the date within each collection
var remove_duplicates = function(collection) {
  return collection
    .map(function(image) {
      var date = ee.Date(image.get('system:time_start')).format('YYYY-MM-dd');  // Get the date from each image
      return image.set('date', date);  // Add date as a property
    })
    .distinct('date');  // Remove duplicates based on the 'date' property
};

// Dataset for each model
var dataset_gfdl = ee.ImageCollection('NASA/GDDP-CMIP6')
    .filter(ee.Filter.date('2041-01-01', '2041-12-31'))
    .filter(ee.Filter.eq('scenario', 'ssp245'))
    .filter(ee.Filter.eq('model', 'GFDL-ESM4'));
var max_air_temp_gfdl = remove_duplicates(dataset_gfdl.select('tasmax'));

var dataset_ipsl = ee.ImageCollection('NASA/GDDP-CMIP6')
    .filter(ee.Filter.date('2041-01-01', '2041-12-31'))
    .filter(ee.Filter.eq('model', 'IPSL-CM6A-LR'));
var max_air_temp_ipsl = remove_duplicates(dataset_ipsl.select('tasmax'));

var dataset_mpi = ee.ImageCollection('NASA/GDDP-CMIP6')
    .filter(ee.Filter.date('2041-01-01', '2041-12-31'))
    .filter(ee.Filter.eq('model', 'MPI-ESM1-2-HR'));
var max_air_temp_mpi = remove_duplicates(dataset_mpi.select('tasmax'));

var dataset_mri = ee.ImageCollection('NASA/GDDP-CMIP6')
    .filter(ee.Filter.date('2041-01-01', '2041-12-31'))
    .filter(ee.Filter.eq('model', 'MRI-ESM2-0'));
var max_air_temp_mri = remove_duplicates(dataset_mri.select('tasmax'));

var dataset_ukesm = ee.ImageCollection('NASA/GDDP-CMIP6')
    .filter(ee.Filter.date('2041-01-01', '2041-12-31'))
    .filter(ee.Filter.eq('model', 'UKESM1-0-LL'));
var max_air_temp_ukesm = remove_duplicates(dataset_ukesm.select('tasmax'));


print(max_air_temp_gfdl.size())

// Get the list of images from each collection
var list_gfdl = max_air_temp_gfdl.toList(max_air_temp_gfdl.size());
var list_ipsl = max_air_temp_ipsl.toList(max_air_temp_ipsl.size());
var list_mpi = max_air_temp_mpi.toList(max_air_temp_mpi.size());
var list_mri = max_air_temp_mri.toList(max_air_temp_mri.size());
var list_ukesm = max_air_temp_ukesm.toList(max_air_temp_ukesm.size());

// Define the number of images (728)
var num_images = max_air_temp_gfdl.size();

// Generate a sequence of indices from 0 to 727
var indices = ee.List.sequence(0, num_images.subtract(1));

// Function to compute the average image at a given index
var mean_image_list = indices.map(function(i) {
  var img_gfdl = ee.Image(list_gfdl.get(i));
  var img_ipsl = ee.Image(list_ipsl.get(i));
  var img_mpi = ee.Image(list_mpi.get(i));
  var img_mri = ee.Image(list_mri.get(i));
  var img_ukesm = ee.Image(list_ukesm.get(i));

  // Compute the mean across the five images
  var mean_img = img_gfdl.add(img_ipsl).add(img_mpi).add(img_mri).add(img_ukesm).divide(5);

  // Copy metadata from one of the images (date, projection, etc.)
  return mean_img.set('system:time_start', img_gfdl.get('system:time_start'));
});

// Convert the list of images into an ImageCollection
var averaged_collection = ee.ImageCollection(mean_image_list);

print('Averaged Collection:', averaged_collection);

var region = ee.FeatureCollection(table);

var threshold = 32; // Threshold temperature in Celsius

// Convert to Kelvin (if needed, depends on dataset)
var thresholdK = threshold + 273.15; 

// Apply threshold to the averaged collection
var colThreshold = averaged_collection.map(function (image) {
  var thresholdImage = image.gt(thresholdK); // Identify pixels above 32°C
  return thresholdImage.set('system:time_start', image.get('system:time_start'));
});

// Sum the number of days where at least one pixel exceeded the threshold
var countDaysAbove32 = colThreshold.map(function(image) {
  // Reduce over the region: if any pixel is above threshold, return 1 for that day
  var mask = image.reduceRegion({
    reducer: ee.Reducer.anyNonZero(), 
    geometry: region,
    scale: 5000, // Adjust scale based on data resolution
    bestEffort: true
  });

  // Get the result and assign 1 if true, otherwise 0
  var isAbove = ee.Algorithms.If(mask.get('tasmax'), 1, 0);

  return ee.Feature(null, {
    'date': image.get('system:time_start'),
    'day_above_32': isAbove
  });
});

// Convert to FeatureCollection for analysis
var daysAbove32FC = ee.FeatureCollection(countDaysAbove32);

// Sum the number of days where at least one pixel was above 32°C
var totalDaysAbove32 = daysAbove32FC.aggregate_sum('day_above_32');

print('Total number of days with at least one pixel above 32°C:', totalDaysAbove32);

// Classify risk based on the average yearly extreme heat days
var riskLevel = ee.Algorithms.If(
  totalDaysAbove32.lt(90), 'Low risk',
  ee.Algorithms.If(totalDaysAbove32.lte(180), 'Medium risk', 'High risk')
);

print('Risk Level:', riskLevel);

/*
// Visualization parameters for the count layer
var visParams = {
  min: 0,
  max: 100,  // Adjust based on expected max count
  palette: ['blue', 'yellow', 'red'] // Blue (low count), Yellow (medium), Red (high)
};

var maxAirTemperatureVis = {
  min: 240,
  max: 310,
  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],
};
// Center the map over the region
Map.centerObject(region, 7);

// Add the maximum air temperature layer
Map.addLayer(
    averaged_collection.mean().clip(region),  // Show the mean temperature over the year
    maxAirTemperatureVis,
    'Mean Maximum Air Temperature (K)'
);

Map.addLayer(
    averaged_collection, maxAirTemperatureVis,
    'Minimum Air Temperature (K)');

/*

// days with X pixels above 32

var threshold = 32; // Threshold temperature in Celsius
var minPixelCount = 5; // Minimum number of pixels required

// Convert threshold to Kelvin (if needed)
var thresholdK = threshold + 273.15; 

// Apply threshold to the averaged collection
var colThreshold = averaged_collection.map(function (image) {
  var thresholdImage = image.gt(thresholdK); // Identify pixels above 32°C
  return thresholdImage.set('system:time_start', image.get('system:time_start'));
});

// Count the number of pixels above the threshold per day
var countDaysAbove32 = colThreshold.map(function(image) {
  // Count the number of pixels that exceed the threshold in the region
  var pixelCount = image.reduceRegion({
    reducer: ee.Reducer.sum(),  // Sum up the pixels above 32°C
    geometry: region,
    scale: 5000, // Adjust scale based on dataset resolution
    bestEffort: true
  }).get('tasmax'); // Extract the count for the 'tasmax' band

  // Check if the count is at least 20 pixels
  var isAbove = ee.Algorithms.If(ee.Number(pixelCount).gte(minPixelCount), 1, 0);

  return ee.Feature(null, {
    'date': image.get('system:time_start'),
    'day_above_32': isAbove
  });
});

// Convert to FeatureCollection for analysis
var daysAbove32FC = ee.FeatureCollection(countDaysAbove32);

// Sum the number of days where at least 20 pixels were above 32°C
var totalDaysAbove32 = daysAbove32FC.aggregate_sum('day_above_32');

print('Total number of days with at least 20 pixels above 32°C:', totalDaysAbove32);


*/
