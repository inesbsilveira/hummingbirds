var projectArea = ee.FeatureCollection(table2);

// Set the date range for the analysis
var startDate = ee.Date('2000-01-01');
var endDate = ee.Date('2023-01-01');

// Calculate the number of years to process
var nYears = ee.Number(endDate.difference(startDate, 'year')).round().subtract(1);
print(nYears);

// Load the Hansen Global Forest Change dataset (for forest cover and loss)
var hansen = ee.Image("UMD/hansen/global_forest_change_2022_v1_10")
  .select("treecover2000")
  .gt(30); // Define forest as >30% tree cover

// Mask out non-forest areas by using tree cover > 0 in 2000 (forest is present)
var forestMask = hansen.gt(0);

// Load MODIS Burned Area dataset
var sst = ee.ImageCollection("MODIS/006/MCD64A1")
            .select('BurnDate')
            .filterDate(startDate, endDate);

print('sst',sst);

var byYear = ee.FeatureCollection(
  ee.List.sequence(0, nYears).map(function (n) {
    // Calculate the start and end date for each year
    var ini = startDate.advance(n, 'year');
    var end = ini.advance(1, 'year');
    
    // Filter the burned area collection for the given year
    var resul = sst.filterDate(ini, end);
    resul = resul.max().set('system:time_start', ini);
    
    // Get the burned area (where BurnDate is not 0) and mask it
    resul = ee.Image.pixelArea()
               .divide(10000)
               .updateMask(resul.neq(0)); // Mask out non-burned areas
    
    // Apply forest mask: only consider burned areas within forested regions
    resul = resul.updateMask(forestMask);
    
    // Sum the area of burned forest for the year
    resul = resul.reduceRegion({
      reducer: ee.Reducer.sum(),
      geometry: projectArea,
      scale: 500,
      maxPixels: 1e12,
      tileScale: 4
    });
    
    // Extract the area burned in the forest for that year
    var burnedArea = resul.get('area');
    
    // Return the area burned in the forest for that year
    return ee.Feature(null, {'area_ha': burnedArea});
}));

print('Area_ha Burned Forest by Year', byYear);

// Calculate the total area of the project region
var projectAreaSize = projectArea.geometry().area().divide(10000); // in hectares

// Calculate threshold for 1% of the project area
var threshold = projectAreaSize.multiply(0.01); // 1% of project area in hectares
print('Threshold (1% of project area): ', threshold);

// Filter years where the burned area exceeds 1% of the project area
var riskYears = byYear.filter(ee.Filter.gt('area_ha', threshold));

// Count how many years exceeded the threshold
var countRiskYears = riskYears.size();
print('Number of years exceeding threshold: ', countRiskYears);

// Classify risk based on the count of years exceeding the threshold
var riskLevel;
countRiskYears.evaluate(function(count) {
  print('Evaluated countRiskYears: ', count);
  
  if (count < 2) {
    riskLevel = 'Low';
  } else if (count <= 6) {
    riskLevel = 'Medium';
  } else {
    riskLevel = 'High';
  }
  
  print('Forest Fire Risk Classification:', riskLevel);
});
