
var projectArea = ee.FeatureCollection(geometry);

var world_region = 'Africa Savana'; // choose one: Africa Forest, Africa Savana, Europe, Asia, Southeast Asia, Australia, North America, LatAm
var perc_threshold;
var years_low_risk;
var years_high_risk;

switch (world_region) {
    case 'Africa Forest': // large areas of savana and tropical forest. In some regions wildfires are relatively frequent
        perc_threshold = 0.01;
        years_low_risk = 1;
        years_high_risk = 3;
        break;
    case 'Africa Savana': //fires tend to be frequent but not often cover larger areas
        perc_threshold = 0.03;
        years_low_risk = 1;
        years_high_risk = 3;
        break;
    case 'Europe': //variable risk being north of Europe less vulnerable to woldfires
        perc_threshold = 0.01;
        years_low_risk = 2;
        years_high_risk = 4;
        break;
    case 'Asia': //from tropical forest to arid regions
        perc_threshold = 0.01;
        years_low_risk = 2;
        years_high_risk = 5;
        break;
    case 'Australia': //prone to wildfires, particularly in the south
        perc_threshold = 0.01;
        years_low_risk = 1;
        years_high_risk = 3;
        break;
    case 'North America': //significant wildfire activity, with notable fire seasons
        perc_threshold = 0.01;
        years_low_risk = 2;
        years_high_risk = 5;
        break;
    case 'LatAm':
        perc_threshold = 0.01;
        years_low_risk = 1;
        years_high_risk = 3;
        break;
    default:
        print('Country not recognized. Using default values.');
        perc_threshold = 0.01;
        years_low_risk = 2;
        years_high_risk = 4;
}


// Set the date range for the analysis
var startDate = ee.Date('2000-01-01');
var endDate = ee.Date('2023-01-01');

// Calculate the number of years to process
var nYears = ee.Number(endDate.difference(startDate, 'year')).round().subtract(1);
print(nYears);

// Load MODIS Burned Area dataset
var sst = ee.ImageCollection("MODIS/006/MCD64A1")
            .select('BurnDate')
            .filterDate(startDate, endDate);

var byYear = ee.FeatureCollection(
  ee.List.sequence(0, nYears).map(function (n) {
    // Calculate the start and end date for each year
    var ini = startDate.advance(n, 'year');
    var end = ini.advance(1, 'year');
    
    // Filter the burned area collection for the given year
    var result = sst.filterDate(ini, end);
    result = result.max().set('system:time_start', ini);
    
    // Get the burned area (where BurnDate is not 0) and mask it
    result = ee.Image.pixelArea()
               .divide(10000)
               .updateMask(result.neq(0)); // Mask out non-burned areas
    
    
    // Sum the area of burned forest for the year
    result = result.reduceRegion({
      reducer: ee.Reducer.sum(),
      geometry: projectArea,
      scale: 500,
      maxPixels: 1e12,
      tileScale: 4
    });
    
    // Extract the area burned in the forest for that year
    var burnedArea = result.get('area');
    
    // Return the area burned in the forest for that year
    return ee.Feature(null, {'area_ha': burnedArea});
}));

print('Area_ha Burned Forest by Year', byYear);

// Calculate the total area of the project region
var projectAreaSize = projectArea.geometry().area().divide(10000); // in hectares
print('Total project area (ha): ', projectAreaSize);

// Calculate threshold for 1% of the project area
var threshold = projectAreaSize.multiply(perc_threshold); // 1% of project area in hectares
print('Threshold (ha of the project area): ', threshold);

// Filter years where the burned area exceeds 1% of the project area
var riskYears = byYear.filter(ee.Filter.gt('area_ha', threshold));

// Count how many years exceeded the threshold
var countRiskYears = riskYears.size();
print('Number of years exceeding threshold: ', countRiskYears);

// Classify risk based on the count of years exceeding the threshold
var riskLevel;
countRiskYears.evaluate(function(count) {
  print('Evaluated countRiskYears: ', count);
  
  if (count < years_low_risk) {
    riskLevel = 'Low';
  } else if (count <= years_high_risk) {
    riskLevel = 'Medium';
  } else {
    riskLevel = 'High';
  }
  
  print('Forest Fire Risk Classification:', riskLevel);
});
