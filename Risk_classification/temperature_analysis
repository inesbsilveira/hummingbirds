
// define the period of time for temperature and precipitation
var start_date = '2024-01-01';
var end_date = '2024-12-31';

// load your shapefile from assets
var region = ee.FeatureCollection(table);

// Load the ERA5-Land dataset (temperature in Kelvin)
var temp_dataset = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')
                .filterDate(start_date, end_date)
                .select('temperature_2m');

// Calculate the mean, min, and max annual temperature
var meanTemp = temp_dataset.mean().clip(region);
var minTemp = temp_dataset.min().clip(region);
var maxTemp = temp_dataset.max().clip(region);

// Convert temperature from Kelvin to Celsius
var meanTempCelsius = meanTemp.subtract(273.15);
var minTempCelsius = minTemp.subtract(273.15);
var maxTempCelsius = maxTemp.subtract(273.15);

// Calculate the average, min, and max temperature over the region
var tempStats = meanTempCelsius.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: region.geometry(),
  scale: 1000,
  bestEffort: true
});

var minStats = minTempCelsius.reduceRegion({
  reducer: ee.Reducer.min(),
  geometry: region.geometry(),
  scale: 1000,
  bestEffort: true
});

var maxStats = maxTempCelsius.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: region.geometry(),
  scale: 1000,
  bestEffort: true
});

// Extract the temperature values and print them as numbers
var avgTemp = tempStats.get('temperature_2m');
var minTemp = minStats.get('temperature_2m');  
var maxTemp = maxStats.get('temperature_2m');  

// Print the results to the console as numbers
print('Average Annual Temperature (°C):', avgTemp.getInfo());
print('Minimum Annual Temperature (°C):', minTemp.getInfo());
print('Maximum Annual Temperature (°C):', maxTemp.getInfo());


var threshold = 32; // Threshold temperature in Celsius
// Convert to Kelvin (if needed, depends on dataset)
var thresholdK = threshold + 273.15; 
// Apply threshold to the averaged collection (make sure averaged_collection is defined)
var colThreshold = temp_dataset.map(function (image) {
  // Identify pixels above 32°C (thresholdK in Kelvin)
  var thresholdImage = image.gt(thresholdK);
  return thresholdImage.set('system:time_start', image.get('system:time_start'));
});

// Now, aggregate by day: We need to reduce over the region and get 1 if any pixel exceeds the threshold for that day
var countDaysAbove32 = colThreshold.map(function(image) {
  // Check if at least one pixel in the region is above 32°C
  var mask = image.reduceRegion({
    reducer: ee.Reducer.anyNonZero(),
    geometry: region,
    scale: 1000, // Adjust scale based on your dataset resolution
    maxPixels: 1e8
  });

  // Set 'day_above_32' to 1 if any pixel exceeded the threshold
  var isAbove = ee.Algorithms.If(mask.get('temperature_2m'), 1, 0);

  return ee.Feature(null, {
    'date': image.get('system:time_start'),
    'day_above_32': isAbove
  });
});

// Convert to FeatureCollection for easier analysis
var daysAbove32FC = ee.FeatureCollection(countDaysAbove32);

// Sum the number of hot hours (days with at least one pixel above 32°C)
var totalHotHours = daysAbove32FC.aggregate_sum('day_above_32');

// Divide the total hot hours by 24 to get the number of days
var totalDaysAbove32 = totalHotHours.divide(24);

// Output the total number of days with at least one pixel above 32°C
print('Total number of days with at least one pixel above 32°C:', totalDaysAbove32);
